data(mtcars)
View(mtcars)
lm(mtcars$mpg~mtcars$wt)
fit <- lm (mtcars$wt~mtcars$mpg)
fit
summary(fit$coefficients)
summary(fit$coeff)
plot(fit)
fit <- lm (mtcars$wt~mtcars$mpg)
View(fit)
fit
summary(fit$coefficients)
fit$coefficients$Mean
fit$coefficients[1,3]
fit$coefficients[3,1]
fit$coefficients[1,1
]
predict(fit_car, newdata = data.frame(x = mean(x)), interval = ("confidence"))
predict(fit, newdata = data.frame(x = mean(x)), interval = ("confidence"))
data(mtcars)
x <- mtcars$wt
y <-mtcats$mpg
y <-mtcars$mpg
fit_car <- lm(x~y)
plot(fit)
plot(x,y)
predict(fit_car, newdata = data.framey = mean(y)), interval = ("confidence"))
predict(fit_car, newdata = data.frame(y = mean(y)), interval = ("confidence"))
predict(fit_car, newdata = data.frame(x = mean(x)), interval = ("confidence"))
data(mtcars)
y <- mtcars$mpg
x <- mtcars$wt
fit_car <- lm(y ~ x)
predict(fit_car, newdata = data.frame(x = mean(x)), interval = ("confidence"))
?mtcars
fit
plot(x,y)
predict(fit_car, newdata = data.frame(x = 3), interval = ("prediction"))
fit_car2 <- lm(y,x/2)
fit_car2 <- lm(y~x/2)
fit_car2 <- lm(y ~ x)
data(mtcars)
y <- mtcars$mpg
x <- mtcars$wt/2
fit_car <- lm(y ~ x)
predict(fit_car, newdata = data.frame(x = 3), interval = ("prediction"))
fit_car2 <- lm(y ~ x)
plot(fit_car2))
data(mtcars)
y <- mtcars$mpg
x <- mtcars$wt
fit_car <- lm(y ~ x)
predict(fit_car, newdata = data.frame(x = 3), interval = ("prediction"))
fit_car2 <- lm(y ~ x/2)
plot(fit_car2))
data(mtcars)
y <- mtcars$mpg
x <- mtcars$wt
fit_car <- lm(y ~ x)
predict(fit_car, newdata = data.frame(x = 3), interval = ("prediction"))
fit_car2 <- lm(y ~ x/2)
plot(fit_car2)
plot(fit_car2)
coef <- summary(fit)$coeff
coef
(coef2[2,1] + c(-1, 1) * qt(.975, df = fit_car2$df) * coef[2, 2])
coef2 <- summary(fit)$coeff
(coef2[2,1] + c(-1, 1) * qt(.975, df = fit_car2$df) * coef[2, 2])
coef2 <- coeff(summary(fit)
(coef2[2,1] + c(-1, 1) * qt(.975, df = fit_car2$df) * coef[2, 2])
coef2 <- coeff(summary(fit))
(coef2[2,1] + c(-1, 1) * qt(.975, df = fit_car2$df) * coef[2, 2])
coef2
fit_car2 <- lm(y ~ x/2)
plot(fit_car2)
coef2 <- coeff(summary(fit_car2))
(coef2[2,1] + c(-1, 1) * qt(.975, df = fit_car2$df) * coef[2, 2])
coef2 <- coef(summary(fit_car2))
(coef2[2,1] + c(-1, 1) * qt(.975, df = fit_car2$df) * coef[2, 2])
data(mtcars)
y <- mtcars$mpg
x <- mtcars$wt
##fit_car <- lm(y ~ x)
##predict(fit_car, newdata = data.frame(x = 3), interval = ("prediction"))
fit_car2 <- lm(y ~ x/2)
coef2 <- coef(summary(fit_car2))
(coef2[2,1] + c(-1, 1) * qt(.975, df = fit_car2$df) * coef[2, 2])
coef2
data(mtcars)
y <- mtcars$mpg
x <- mtcars$wt/2
##fit_car <- lm(y ~ x)
##predict(fit_car, newdata = data.frame(x = 3), interval = ("prediction"))
fit_car2 <- lm(y ~ x)
coef2 <- coef(summary(fit_car2))
coef2[2,1] - qt(.975, df = fit_car2$df) * coef[2,2]
data(mtcars)
y <- mtcars$mpg
x <- mtcars$wt/2
##fit_car <- lm(x ~ y)
##predict(fit_car, newdata = data.frame(x = 3), interval = ("prediction"))
fit_car2 <- lm(y ~ x)
coef2 <- coef(summary(fit_car2))
coef2[2,1] - qt(.975, df = fit_car2$df) * coef[2,2]
data(mtcars)
y <- mtcars$mpg
x <- mtcars$wt/2
##fit_car <- lm(x ~ y)
##predict(fit_car, newdata = data.frame(x = 3), interval = ("prediction"))
fit_car2 <- lm(y ~ x)
(coef2 <- coef(summary(fit_car2)))
coef2[2,1] - qt(.975, df = fit_car2$df) * coef[2,2]
data(mtcars)
y <- mtcars$mpg
x <- mtcars$wt/2
fit <- lm(y ~ x)
fit <- lm(y ~ x)
coef2 <- coef(summary(fit))
coef2[2,1] - qt(.975, df = fit$df) * coef[2,2]
library(kernl
library(kernlab)
library(kernlab)
data(spam)
library(caret)
library(kernlab)
data(spam)
inTrain <- createDataPartition(y=spam$type, p=0.75,list-FALSE)
training <-spam[inTrain,]
testing <-spam[-inTrain]
View(spam)
inTrain <- createDataPartition(y=spam$type, p=0.75,list-FALSE)
library(caret)
install.packages(caret)
install.packages("caret", dependencies = c("Depends", "Suggests"))
library(caret)
library(kernlab)
data(spam)
inTrain <- createDataPartition(y=spam$type, p=0.75,list-FALSE)
training <-spam[inTrain,]
testing <-spam[-inTrain]
library(caret)
library(kernlab)
data(spam)
data(mtcars)
View(mtcars)
fit <- lm(mpg ~ factor(cyl) + wt, data = mtcars)
View(fit)
plot(fit)
plot(fit)
summary(fit)
fit_adjusted <- lm(mpg ~ cyl + wt, mtcars)
summary(fit_adjusted)$coef
fit_adjusted <- lm(mpg ~ factor(cyl) + wt, mtcars)
summary(fit_adjusted)$coef
fit_adjusted <- lm(mpg ~ factor(cyl), mtcars)
summary(fit_adjusted)$coef
fit1 <- lm(mpg~factor(cyl)) + wt, mtcars)
fit1 <- lm(mpg ~ factor(cyl)) + wt, mtcars)
fit1 <- lm(mpg ~ factor(cyl)) + wt, data=mtcars)
fit1 <- lm(mpg ~ factor(cyl)) + wt,mtcars)
fit1 <- lm(mpg ~ factor(cyl) + wt,mtcars)
fit2 <- lm(mpg ~ factor(cyl) * wt,mtcars)
summary(fit1)$adj.r.squared
summary(fit1)
summary(fit2)$adj.r.squared
summary(fit2)
lrtest(fit1, fit2)
compare <- anova(fit1, fit2)
compare$Pr
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
lm(mpg ~ wt + factor(cyl), data = mtcars)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y ~ x)
max(hatvalues(fit))
plot(fit)
influence.measures(fit)$infmat[5, 'dfb.x']
library(AppliedPredictiveModeling)
installed.packages(AppliedPredictiveModeling)
install.packages(cran)
install.packages("cran")
install.packages(availablePackages)
library(AppliedPredictiveModeling)
availablePackages <- available.packages()[,1]
install.packages(availablePackages)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
summary(segmentationOriginal)
View(segmentationOriginal)
library(caret)
set.seed(125)
testdata <- segmentationoriginal[segmentation$Case=="Test"]
testdata <- segmentationOriginal[segmentation$Case=="Test"]
testdata <- segmentationOriginal[segmentationOriginal$Case=="Test"]
testdata <- segmentationOriginal[,segmentationOriginal$Case=="Test"]
inTrain <- data$Case == "Train"
inTrain <- segmentationOriginal$Case == "Train"
inTrain <- segmentationOriginal$Case == "Train"
trainData <- data[inTrain, ]
testData <- data[!inTrain, ]
inTrain <- segmentationOriginal$Case == "Train"
trainData <- segmentationOriginal[inTrain, ]
testData <- segmentationOriginal[!inTrain, ]
View(inTrain)
View(trainData)
View(testData)
cartModel <- train(Class ~ ., data=trainData, method="rpart")
cartModel$finalModel
fancyRpartPlot(model$finalModel)
fancyRpartPlot(model$finalModel)
library(pgmm)
data(olive)
olive = olive[,-1]
View(olice)
View(olive)
fit <- lm(area ~., data = olive, method="rpart2")
fit <- lm(Area ~., data = olive, method="rpart2")
fit <- train(Area ~., data = olive, method="rpart2")
fit <- train(Area ~., data = olive, method="rpart2")
treeModel <- train(Area ~., data = olive, method="rpart2")
predict(treeModel, newdata)
library(pgmm)
data(olive)
olive = olive[,-1]
newdata = as.data.frame(t(colMeans(olive)))
treeModel <- train(Area ~., data = olive, method="rpart2")
predict(treeModel, newdata)
fit
library(pgmm)
data(olive)
olive = olive[,-1]
newdata = as.data.frame(t(colMeans(olive)))
treeModel <- train(Area ~., data = olive, method="rpart2")
predict(treeModel, newdata)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
View(SAheart)
View(trainSA)
View(testSA)
set.seed(13234)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass
data(mtcars)
data
View(mtcars)
?mtcars
mpgdata <- lm(mpg ~ am, data=mtcars, list = FALSE)
mpgdata <- lm(mpg ~ am, data=mtcars)
plot(mpgdata)
coef(summary(fit))
data(mtcars)
fit <- lm(mpg ~ am, data=mtcars)
coef(summary(fit))
plot(fit)
hist(mtcars$mpg)
hist(mtcars$mpg, col="red")
hist(mtcars$mpg, col="orange")
data(mtcars)
## checking outliers
hist(mtcars$mpg, col="orange")
fit <- lm(mpg ~ am, data=mtcars)
coef(summary(fit))
main = "MPG by Transmission Type")
boxplot(mpg~am, data = mtcars,
col = c("dark grey", "light grey"),
xlab = "Transmission",
ylab = "Miles per Gallon",
main = "MPG by Transmission Type")
aggregate(mpg~am, data = mtcars, mean)
anova(bestfit, fit)
bestfit <-lm(mpg~am+wt+hp)
bestfit <-lm(mpg~am+wt+hp, data=mtcars)
anova(bestfit, fit)
par(mfrow = c(2,2))
plot(bestfit)
summary(bestfit)
summary(fit)
library(knitr)
##checking outliers
lot(mpg~am, data = mtcars,
col = c("dark grey", "light grey"),
xlab = "Transmission",
ylab = "Miles per Gallon",
main = "MPG by Transmission Type"
colors("orange","blue"))
boxplot(mpg~am, data = mtcars,
col = c("dark grey", "light grey"),
xlab = "Transmission",
ylab = "Miles per Gallon",
main = "MPG by Transmission Type",
colors ="orange","blue")
boxplot(mpg~am, data = mtcars,
col = c("dark grey", "light grey"),
xlab = "Transmission",
ylab = "Miles per Gallon",
main = "MPG by Transmission Type",
col=c("gold","darkgreen"))
plot(density(mtcars$mpg, col="red"))
plot(density(mtcars$mpg)
plot(density(mtcars$am)
plot(density(mtcars$am))
plot(mpg,am)
plot(mpg,am, data=mtcars)
plot(mpg,am, data=mtcars)
plot(mpg~am, data=mtcars)
sm.density.compare(mtcars$mpg, mtcars$am)
legend("topright", levels(mtcars$am, fill=2+(0:nlevels(data$cond)))
legend("topright", levels(mtcars$am, fill=2+(0:nlevels(data$cond))
legend("topright", levels(mtcars$am), fill=2+(0:nlevels(data$cond))
legend("topright", levels(mtcars$am), fill=2+(0:nlevels(data$cond)))
sm.density.compare(mtcars$mpg, mtcars$am)
legend("topright", levels(mtcars$am), title = "XYX")
sm.density.compare(mtcars$mpg, mtcars$am)
library(sm)
sm.density.compare(mtcars$mpg, mtcars$am)
t.test(mpg ~ am, data = mtcars)
sort(cor(mtcars)[1,])
fit <- lm(mpg ~ ., data=mtcars)
coef(summary(fit))
full.model <- lm(mpg ~ ., data = mtcars)
best.model <- step(full.model, direction = "backward")
summary(best.model)
fit <lm(mpg ~ am, data=mtcars)
summary(fit)
fit <lm(mpg ~ am, data=mtcars)
summary(fit)
summary(best.model)
full.model <- lm(mpg ~ ., data = mtcars)
best.model <- step(full.model, direction = "forward")
summary(best.model)
step(full.model, direction = "backward")
Sys.which("pdflatex")
Sys.which("pdflatex")
predictionsB2
predictionsB2<-predict(modFitB1,testingori, type="class")
testingori<-testingori[,names(training[,-52])]
predictionsB2
library(ElemStatLearn)
library(randomForest)
library(caret)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
fit1 <- train(y ~ ., data = vowel.train, method = "rf", trControl = trainControl(number = 4))
fit2 <- train(y ~ ., data = vowel.train, method = "gbm")
predict1 <- predict(fit1, newdata = vowel.test)
predict2 <- predict(fit2, newdata = vowel.test)
DF_combined <- data.frame(predict1, predict2, y = vowel.test$y)
fit_combined <- train(y ~ ., data = DF_combined, method = "gam")
predict3 <- predict(fit_combined, newdata = vowel.test)
c1 <- confusionMatrix(predict1, vowel.test$y)
c2 <- confusionMatrix(predict2, vowel.test$y)
c3 <- confusionMatrix(predict3, DF_combined$y)
c1
}
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
library(slidify)
library(devtools)
?dataset
library(help = "datasets")
shiny::runApp('C:/Users/rohidah/Google Drive/3  Data Science/Developing Data Products/shinyapp')
shiny::runApp('C:/Users/rohidah/Google Drive/3  Data Science/Developing Data Products/shinyapp')
View(dat)
View(data)
View(AirPassengers)
View(AirPassengers$year)
data("AirPassengers")
dim(data)
dim(AirPassengers)
yr = repmat((1949:1960),12,1);
mo = repmat((1:12)',1,12);
time = datestr(datenum(yr(:),mo(:),1));
ts = timeseries(y(:),time,'name','AirlinePassengers');
ts.TimeInfo.Format = 'dd-mmm-yyyy';
tscol = tscollection(ts);
tscol = tscollection(ts);
data("AirPassengers")
yr = repmat((1949:1960),12,1);
mo = repmat((1:12)',1,12);
data(mtcars)
View(mtcars)
example("AirPassengers")
shiny::runApp('C:/Users/rohidah/Google Drive/3  Data Science/Developing Data Products/shinyapp')
shiny::runApp('C:/Users/rohidah/Google Drive/3  Data Science/Developing Data Products/shinyapp')
View(dataset)
View(datasets)
datasets?
?datasets
View
help = "datasets"
library(help = "datasets")
shiny::runApp('C:/Users/rohidah/Google Drive/3  Data Science/Developing Data Products/shinyapp')
shiny::runApp('C:/Users/rohidah/Google Drive/3  Data Science/Developing Data Products/shinyapp')
shiny::runApp('C:/Users/rohidah/Google Drive/3  Data Science/Developing Data Products/shinyapp')
shiny::runApp('C:/Users/rohidah/Google Drive/3  Data Science/Developing Data Products/shinyapp')
shiny::runApp('C:/Users/rohidah/Google Drive/3  Data Science/Developing Data Products/shinyapp')
shiny::runApp('C:/Users/rohidah/Google Drive/3  Data Science/Developing Data Products/shinyapp')
shiny::runApp('C:/Users/rohidah/Google Drive/3  Data Science/Developing Data Products/shinyapp')
shiny::runApp('C:/Users/rohidah/Google Drive/3  Data Science/Developing Data Products/shinyapp')
shiny::runApp('C:/Users/rohidah/Google Drive/3  Data Science/Developing Data Products/shinyapp')
shiny::runApp('C:/Users/rohidah/Google Drive/3  Data Science/Developing Data Products/shinyapp')
View(sleep)
shiny::runApp('C:/Users/rohidah/Google Drive/3  Data Science/Developing Data Products/shinyapp')
shiny::runApp('C:/Users/rohidah/Google Drive/3  Data Science/Developing Data Products/shinyapp')
shiny::runApp('C:/Users/rohidah/Google Drive/3  Data Science/Developing Data Products/shinyapp')
shiny::runApp('C:/Users/rohidah/Google Drive/3  Data Science/Developing Data Products/shinyapp')
install.packages('devtools')
shiny::runApp('C:/Users/rohidah/Google Drive/3  Data Science/Developing Data Products/shinyapp')
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='rohidah', token='E9E727130B2A99919410FA02479532D3', secret='pscY98CSLZreLnTBQZXj8ba9ABH4oGtRtRYhCP+1')
library(rsconnect)
deployApp()
shiny::runApp('C:/Users/rohidah/Google Drive/3  Data Science/Developing Data Products/shinyapp')
shiny::runApp('C:/Users/rohidah/Google Drive/3  Data Science/Developing Data Products/shinyapp')
shiny::runApp('C:/Users/rohidah/Google Drive/3  Data Science/Developing Data Products/shinyapp')
shiny::runApp('C:/Users/rohidah/Google Drive/3  Data Science/Developing Data Products/shinyapp')
shiny::runApp('C:/Users/rohidah/Google Drive/3  Data Science/Developing Data Products/shinyapp')
shiny::runApp('C:/Users/rohidah/Google Drive/3  Data Science/Developing Data Products/shinyapp')
shiny::runApp('C:/Users/rohidah/Google Drive/3  Data Science/Developing Data Products/shinyapp')
shiny::runApp('C:/Users/rohidah/Google Drive/3  Data Science/Developing Data Products/shinyapp')
structure(dataset)
structure(trees)
structure (women)
shiny::runApp('C:/Users/rohidah/Google Drive/3  Data Science/Developing Data Products/shinyapp')
shiny::runApp('C:/Users/rohidah/Google Drive/3  Data Science/Developing Data Products/shinyapp')
shiny::runApp('C:/Users/rohidah/Google Drive/3  Data Science/Developing Data Products/shinyapp')
shiny::runApp('C:/Users/rohidah/Google Drive/3  Data Science/Developing Data Products/shinyapp')
shiny::runApp('C:/Users/rohidah/Google Drive/3  Data Science/Developing Data Products/shinyapp')
shiny::runApp('C:/Users/rohidah/Google Drive/3  Data Science/Developing Data Products/shinyapp')
shiny::runApp('C:/Users/rohidah/Google Drive/3  Data Science/Developing Data Products/shinyapp')
getwd(0)
getwd\
getwd\
getwd
getwd()
setwd("C:/sers/rohidah/Google Drive/3  Data Science/Developing Data Products/shinyapp")
setwd("C:/Users/rohidah/Google Drive/3  Data Science/Developing Data Products/shinyapp")
